---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<h1>Snake</h1>
		<canvas></canvas>
		<button id="play">Start (Space)</button>
		<button id="reset">Reset (Enter)</button>
	</body>
</html>

<style>
	:root{
		font-family: Inter, system-ui, Arial, Helvetica, sans-serif;

		color-scheme: dark light;
		color: rgba(255, 255, 255, 8.7);
		background-color: #242424;

		font-synthesis: none;
		text-rendering: optimizeLegibility;
	}
	body{
		margin: 0;
		padding: 0;
		display: grid;
		gap: .5rem;
		place-content: center;
		min-height: 100vh;
	}
	h1{
		text-align: center;
		margin: 0;
	}
	button{
		border-radius: .5rem;
		padding: .3rem;
	}
</style>


<script>
	const resetButton = document.getElementById("reset")
	const playButton = document.getElementById("play") as HTMLElement
	const canvas = document.querySelector("canvas") as HTMLCanvasElement
	const context = canvas.getContext("2d") as CanvasRenderingContext2D

	type direction = "UP" | "DOWN" | "RIGHT" | "LEFT"
	type coordenates = {
		x: number
		y: number
	}
	type GameState = {
		board: {
			width: number
			height: number
			pixel_size: number
		},
		goal: coordenates,
		snake: {
			body: coordenates[]
			lastDirection: direction
			nextDirection: direction
		}
	}
	
	const OPOSITE_DIRECTION = {
		DOWN: "UP",
		UP: "DOWN",
		RIGHT: "LEFT",
		LEFT: "RIGHT"
	}

	const INITIAL_STATE: GameState = {
		board: {
			width: 30,
			height: 30,
			pixel_size: 10,
		},
		goal: {
			x: 17,
			y: 12
		},
		snake : {
			body: [{x: 14, y: 0}, {x: 14, y: 1},],
			lastDirection: "UP",
			nextDirection: "DOWN"
		}
	}

	let GAME_STATE = "PAUSE"
	// Generates new object, not pass as reference
	let BOARD = {...INITIAL_STATE.board}
	let SNAKE= {...INITIAL_STATE.snake}
	let GOAL = {...INITIAL_STATE.goal}

	canvas.width = BOARD.pixel_size * BOARD.width
	canvas.height = BOARD.pixel_size * BOARD.height

	context.scale(BOARD.pixel_size, BOARD.pixel_size)

	function setGameOver(){
		GAME_STATE = "GAME_OVER"
		playButton.setAttribute("disabled", "")
		alert("GAME_OVER")
	}

	function resetGame() {
		// resets start button
		playButton.innerHTML = "Start (Space)"
		playButton.removeAttribute("disabled")
		// resets board/game states
		GAME_STATE = "PAUSE"
		BOARD = {...INITIAL_STATE.board}
		SNAKE= {...INITIAL_STATE.snake}
		GOAL = {...INITIAL_STATE.goal}
	}

	function togglePause() {
		if(GAME_STATE === "PAUSE"){
			GAME_STATE = "PLAY"
			playButton.innerHTML = "Pause (Space)"
		}else if (GAME_STATE === "PLAY"){
			GAME_STATE = "PAUSE"
			playButton.innerHTML = "Play (Space)"
		}

	}

	function drawBoard (){
		context.fillStyle = "#000"
		context.fillRect(0, 0, canvas.width, canvas.height)
	}

	function drawSnake (){
		context.fillStyle = "#fff"
		SNAKE.body.forEach(({x, y})=>{
			context.fillRect(x, y, 1, 1)
		})
	}

	function drawGoal() {
		context.fillStyle = "yellow"
		context.fillRect(GOAL.x, GOAL.y, 1, 1)
	}

	function leavesBoard(x: number, y:number){
		return x >= BOARD.width || y >= BOARD.width|| x < 0 || y < 0
	}

	function touchesSnakeBody({ x, y }: coordenates){
		return !!SNAKE.body.find(({x: x1, y: y1}) => x === x1 && y === y1)
	}

	function generateRandomPointOnBoard(): coordenates {
		return {
				x: Math.floor(Math.random() * BOARD.width),
				y: Math.floor(Math.random() * BOARD.height)
			}
	}

	function updateSnakeBody() {
		const snakeHead = SNAKE.body.slice(-1)
		const head = snakeHead[0]
		let nextMove: coordenates

		switch(SNAKE.nextDirection){
			case "RIGHT":
				leavesBoard(head.x + 1, head.y)
				? nextMove = {x: 0, y: head.y}
				: nextMove = {x: head.x + 1, y: head.y}
				break
			case "LEFT":
				leavesBoard(head.x - 1, head.y)
				? nextMove = {x: BOARD.width - 1, y: head.y}
				: nextMove = {x: head.x -1, y: head.y}
				break
			case "DOWN":
				leavesBoard(head.x, head.y + 1)
				? nextMove = {x: head.x, y: 0}
				: nextMove = {x: head.x, y: head.y + 1}
				break
			case "UP":
				leavesBoard(head.x, head.y - 1)
				? nextMove = {x: head.x, y: BOARD.height - 1}
				: nextMove = {x: head.x, y: head.y - 1}
				break
		}
		if (touchesSnakeBody(nextMove)){
			setGameOver()
		} else {
			SNAKE.lastDirection = SNAKE.nextDirection
			SNAKE.body = [...SNAKE.body, nextMove]
			if(nextMove.x === GOAL.x && nextMove.y === GOAL.y){
				do{
					GOAL = generateRandomPointOnBoard()
				} while (touchesSnakeBody(GOAL))
			} else {
				SNAKE.body.shift()
			}
		}
	}

	function goesBack(direction: direction) {
		return OPOSITE_DIRECTION[direction] === SNAKE.lastDirection
	}

	window.addEventListener("keydown", (e)=>{
		e.preventDefault()
		switch(e.key){
			case "ArrowUp":
				return goesBack("UP") || GAME_STATE !== "PLAY"  ? null : SNAKE.nextDirection = "UP"
			case "ArrowDown":
				return goesBack("DOWN") || GAME_STATE !== "PLAY"  ? null : SNAKE.nextDirection = "DOWN"
			case "ArrowRight":
				return goesBack("RIGHT") || GAME_STATE !== "PLAY" ? null : SNAKE.nextDirection = "RIGHT"
			case "ArrowLeft":
				return goesBack("LEFT") || GAME_STATE !== "PLAY"  ? null : SNAKE.nextDirection = "LEFT"
			case "Enter":
				return resetGame()
			case " ":
				return togglePause()
		}
	})

	resetButton?.addEventListener("click", resetGame)
	playButton?.addEventListener("click", togglePause)
	
	function update() {
		switch(GAME_STATE){
			case "PAUSE":{
				drawBoard()
				drawSnake()
				drawGoal()
				break
			}
			case "PLAY":{
				updateSnakeBody()
				drawBoard()
				drawSnake()
				drawGoal()
				break
			}
			case "GAME_OVER":{
				break
			}
		}
		setTimeout(() => {
			window.requestAnimationFrame(update)
		}, 1000 / 30);
	}

	update()
</script>